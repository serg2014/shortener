// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/storage.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	models "github.com/serg2014/shortener/internal/models"
	storage "github.com/serg2014/shortener/internal/storage"
)

// MockStorager is a mock of Storager interface.
type MockStorager struct {
	ctrl     *gomock.Controller
	recorder *MockStoragerMockRecorder
}

// MockStoragerMockRecorder is the mock recorder for MockStorager.
type MockStoragerMockRecorder struct {
	mock *MockStorager
}

// NewMockStorager creates a new mock instance.
func NewMockStorager(ctrl *gomock.Controller) *MockStorager {
	mock := &MockStorager{ctrl: ctrl}
	mock.recorder = &MockStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorager) EXPECT() *MockStoragerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorager) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoragerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorager)(nil).Close))
}

// DeleteUserURLS mocks base method.
func (m *MockStorager) DeleteUserURLS(ctx context.Context, req models.RequestForDeleteURLS, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserURLS", ctx, req, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserURLS indicates an expected call of DeleteUserURLS.
func (mr *MockStoragerMockRecorder) DeleteUserURLS(ctx, req, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserURLS", reflect.TypeOf((*MockStorager)(nil).DeleteUserURLS), ctx, req, userID)
}

// Get mocks base method.
func (m *MockStorager) Get(ctx context.Context, key string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockStoragerMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorager)(nil).Get), ctx, key)
}

// GetShort mocks base method.
func (m *MockStorager) GetShort(ctx context.Context, origURL string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShort", ctx, origURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetShort indicates an expected call of GetShort.
func (mr *MockStoragerMockRecorder) GetShort(ctx, origURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShort", reflect.TypeOf((*MockStorager)(nil).GetShort), ctx, origURL)
}

// GetUserURLS mocks base method.
func (m *MockStorager) GetUserURLS(ctx context.Context, userID string) ([]storage.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLS", ctx, userID)
	ret0, _ := ret[0].([]storage.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLS indicates an expected call of GetUserURLS.
func (mr *MockStoragerMockRecorder) GetUserURLS(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLS", reflect.TypeOf((*MockStorager)(nil).GetUserURLS), ctx, userID)
}

// Ping mocks base method.
func (m *MockStorager) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStoragerMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorager)(nil).Ping), ctx)
}

// Set mocks base method.
func (m *MockStorager) Set(ctx context.Context, key, value, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStoragerMockRecorder) Set(ctx, key, value, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStorager)(nil).Set), ctx, key, value, userID)
}

// SetBatch mocks base method.
func (m *MockStorager) SetBatch(ctx context.Context, data storage.Short2orig, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBatch", ctx, data, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBatch indicates an expected call of SetBatch.
func (mr *MockStoragerMockRecorder) SetBatch(ctx, data, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBatch", reflect.TypeOf((*MockStorager)(nil).SetBatch), ctx, data, userID)
}
