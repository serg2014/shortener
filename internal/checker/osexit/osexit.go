package osexit

import (
	"go/ast"
	"strings"

	"golang.org/x/tools/go/analysis"
)

var Analyzer = &analysis.Analyzer{
	Name: "osexitcheck",
	Doc:  "check for use os.Exit",
	Run:  run,
}

var isMainFunc = false

func isPkgDot(expr ast.Expr, pkg, name string) bool {
	sel, ok := expr.(*ast.SelectorExpr)
	return ok && isIdent(sel.X, pkg) && isIdent(sel.Sel, name)
}

func isIdent(expr ast.Expr, ident string) bool {
	id, ok := expr.(*ast.Ident)
	return ok && id.Name == ident
}

func run(pass *analysis.Pass) (interface{}, error) {
	for _, file := range pass.Files {
		if len(file.Comments) != 0 {
			if strings.HasPrefix(file.Comments[0].Text(), "Code generated by") {
				continue
			}
		}
		// функцией ast.Inspect проходим по всем узлам AST
		ast.Inspect(file, func(node ast.Node) bool {
			switch x := node.(type) {
			case *ast.FuncDecl:
				// file.Name.Name name of package
				isMainFunc = file.Name.Name == "main" && x.Name.Name == "main"
			case *ast.CallExpr: // вызов ф-ции
				// file.Name.Name name of package
				if file.Name.Name == "main" && isMainFunc && isPkgDot(x.Fun, "os", "Exit") {
					pass.Reportf(x.Pos(), "os.Exit in func main, package main")
				}
			}

			return true
		})
	}
	return nil, nil
}
