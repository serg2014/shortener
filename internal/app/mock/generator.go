// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/generator.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGenarator is a mock of Genarator interface.
type MockGenarator struct {
	ctrl     *gomock.Controller
	recorder *MockGenaratorMockRecorder
}

// MockGenaratorMockRecorder is the mock recorder for MockGenarator.
type MockGenaratorMockRecorder struct {
	mock *MockGenarator
}

// NewMockGenarator creates a new mock instance.
func NewMockGenarator(ctrl *gomock.Controller) *MockGenarator {
	mock := &MockGenarator{ctrl: ctrl}
	mock.recorder = &MockGenaratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenarator) EXPECT() *MockGenaratorMockRecorder {
	return m.recorder
}

// GenerateShortKey mocks base method.
func (m *MockGenarator) GenerateShortKey() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateShortKey")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateShortKey indicates an expected call of GenerateShortKey.
func (mr *MockGenaratorMockRecorder) GenerateShortKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateShortKey", reflect.TypeOf((*MockGenarator)(nil).GenerateShortKey))
}
