// Package osexit find os.Exit in package main func main
package osexit

import (
	"go/ast"
	"strings"

	"golang.org/x/tools/go/analysis"
)

// Analyzer
var Analyzer = &analysis.Analyzer{
	Name: "osexitcheck",
	Doc:  "check for use os.Exit",
	Run:  run,
}

type visitor struct {
	isMainFunc    bool
	isMainPackage bool
	pass          *analysis.Pass
}

func (v *visitor) Visit(node ast.Node) ast.Visitor {
	if node == nil {
		return nil
	}
	switch x := node.(type) {
	case *ast.FuncDecl:
		// file.Name.Name name of package
		v.isMainFunc = x.Name.Name == "main"
	case *ast.CallExpr: // вызов ф-ции
		// file.Name.Name name of package
		if v.isMainFunc && v.isMainPackage && isPkgDot(x.Fun, "os", "Exit") {
			v.pass.Reportf(x.Pos(), "os.Exit in func main, package main")
		}
	}
	return v
}

func isPkgDot(expr ast.Expr, pkg, name string) bool {
	sel, ok := expr.(*ast.SelectorExpr)
	return ok && isIdent(sel.X, pkg) && isIdent(sel.Sel, name)
}

func isIdent(expr ast.Expr, ident string) bool {
	id, ok := expr.(*ast.Ident)
	return ok && id.Name == ident
}

func run(pass *analysis.Pass) (any, error) {
	for _, file := range pass.Files {
		if len(file.Comments) != 0 {
			if strings.HasPrefix(file.Comments[0].Text(), "Code generated by") {
				continue
			}
		}
		v := &visitor{
			// file.Name.Name name of package
			isMainPackage: file.Name.Name == "main",
			pass:          pass,
		}
		ast.Walk(v, file)
	}
	return nil, nil
}
